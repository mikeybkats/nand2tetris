/** Runs the black jack game

class BlackJack
    field prompt: Prompt - prompt class allows easier manipulation of text for the game
    field promptString: String - the active message to the user
    field gameActive: boolean // 0 or 1 - if set to 0 game is over
    field deck: Deck - the Deck object which is an array of Card objects 
    field score: Score - the Score object for keeping and displaying the score.

    field playerCards: Array<Card>
    field dealerCards: Array<Card>
*/

class BlackJack {
    field Prompt prompt;
    field String promptString;
    field int gameActive;
    field Deck deck;
    field Score score;

    field Array playerCards;
    field Array dealerCards;

    field int randomizer;

    field Boolean hitPlayer;

    constructor BlackJack new() {
        let prompt = Prompt.new();
        let gameActive = 0;
        let playerCards = Array.new(9);
        let dealerCards = Array.new(9);
        let score = Score.new(0,0);
        let hitPlayer = true;
        let deck = Deck.new();

        return this;
    }


    // method start: void
        // starts the game
    method void start(){
        do promptPlayerStart("Welcome to Black Jack. Press spacebar to start.", 32, 0, 0);
        return;
    }

    // method testBlackJack
        // for testing blackJack
    method void testBlackJack(){
        //////// for testing
        var Suit cardSuitObj;
        var String cardSuit;
        var CardValue cardVal;
        let cardSuitObj = Suit.new();
        let cardSuit = cardSuitObj.getSpades();
        let cardVal = CardValue.new();
        let playerCards[0] = Card.new(cardSuit, cardVal.getAce(), cardSuitObj, cardVal);
        let playerCards[1] = Card.new(cardSuit, cardVal.getNine(), cardSuitObj, cardVal);
        let playerCards[2] = Card.new(cardSuit, cardVal.getAce(), cardSuitObj, cardVal);
        return;
    }


    // method promptPlayerStart 
        // returns PromptData
        // arg1: message - a message to display to the user
        // arg2: keyCode - the key code that the player must press to start the game
        // arg3: escKeyCode - the key code which provides a falsey response for the user
        // arg4: shiftX - an integer for moving the location of the text on the x axis 
    method PromptData promptPlayerStart(String message, int keyCode, int escKeyCode, int shiftX) {
        var PromptData userInput;
        do prompt.setMessage(message);
        do prompt.shiftOffset(shiftX, 0);

        let userInput = prompt.promptUser();
        let randomizer = userInput.getElapsedTime();
        do Sys.wait(250);

        while(~(userInput.getKeyCode() = keyCode) & ~(userInput.getKeyCode() = escKeyCode)){
            let userInput = prompt.promptUser();
        }

        do prompt.setOffsetX(10);

        if (userInput.getKeyCode() = keyCode) {
            do prompt.eraseScreen();
            let gameActive = 1;

            // first deal cards to player
            // do testBlackJack();
            do dealCard(playerCards, randomizer + 1);
            do dealCard(playerCards, randomizer + 2);
            do dealCard(dealerCards, randomizer + 3);
            do dealCard(dealerCards, randomizer + 4);

            do gameLoop();


            do playAgain();
        } 

        return userInput;
    }

    // method promptPlayerForAnotherCard
        // returns boolean
        // prompts player for another card 
            // if player responds y method returns true.
            // if player responds n method returns false.
    method Boolean promptPlayerForAnotherCard() {
        var PromptData userInput;
        var int userInputKeyCode;
        let userInputKeyCode = 0;

        do prompt.shiftOffset(2, 0);
        do prompt.setMessage("Would you like to draw another card? (y/n)");
        let userInput = prompt.promptUser();
        
        let userInputKeyCode = userInput.getKeyCode();
        do Sys.wait(300);

        if (userInputKeyCode = 89){
            do prompt.shiftOffset(-2, 0);
            do dealCard(playerCards, userInput.getElapsedTime());

            return true;
        } else {
            do Sys.wait(250);
        }

        do prompt.shiftOffset(-2, 0);
        return false;
    }

    // method loadNewDeck
        // creates a new deck into the deck field
    method void loadNewDeck(){
        let deck = Deck.new();
        return;
    }

    // method dealCard
        // arg1: destination array of Card objects
        // arg2: random number to seed the random card to be dealt
    method void dealCard(Array dest, int randomizer){
        var Card cardFromDeck;
        var int i;

        let cardFromDeck = deck.getRandomCard(randomizer);
        let i = 0;

        while(~(dest[i] = null)){
            let i = i + 1;
        }

        let dest[i] = cardFromDeck;
        return;
    }

    // method printCard
        // arg1: Card object which is the card to print / render to screen
        // arg2: positionY - sets the position of the card
        // arg3: offsetX - a pixel value to shift the card (cards are 32 px wide and one place equals 32px)
        // arg4: shift - a shift int value to amplify the shift factor
    method void printCard(Card card, int positionY, int offsetX, int shift){
        do card.setLocationY(positionY);
        do card.setLocationX((shift * 4) + 6 + offsetX);
        do card.render();
        return;
    }

    // method printHand
        // arg1: Array of card objects 
        // arg2: int positionY sets the vertical position of the hand (cards)
        // arg3: int offsetX sets the horizontal offset of the hand (cards)
    method void printHand(Array cards, int positionY, int offsetX) { 
        var Card card;
        var int i;
        let i = 0;

        while(~(cards[i] = null)) {
            do printCard(cards[i], positionY, offsetX, i);
            let i = i + 1;
        }

        return;
    }

    // method dealFirstHand
        // deals the first hand of cards
        // this method provides timing and user experience for the game
    method void dealFirstHand(){
        do prompt.shiftOffset(14, 0);
        do prompt.setMessage("Dealing cards...");
        do prompt.printMessage();
        do prompt.shiftOffset(-14, 0);

        do Sys.wait(1000);
        do printCard(playerCards[0], 200, 5, 0);
        do Sys.wait(1000);
        do printCard(dealerCards[0], 10, 5, 0);

        do Sys.wait(1000);
        do printCard(playerCards[1], 200, 5, 1);
        do Sys.wait(1000);
        do printCard(dealerCards[1], 10, 5, 1);

        do Sys.wait(1000);
        return;
    }

    // method resetGame
        // resets the game back to default values
    method void resetGame(){
        do deck.dispose();
        do playerCards.dispose();
        do dealerCards.dispose();
        do score.dispose();
        do prompt.setOffsetX(8);
        do prompt.setOffsetY(10);

        let deck = Deck.new();
        let playerCards = Array.new(9);
        let dealerCards = Array.new(9);
        let score = Score.new(0,0);
        let hitPlayer = true;

        return;
    }

    // method endGame
        // ends the game and prints thank you message
    method void endGame(){
        do prompt.eraseScreen();
        do prompt.shiftOffset(10, -2);
        do prompt.setMessage("Thank you for playing!");
        do prompt.printMessage();

        do prompt.shiftOffset(-5, 2);
        do prompt.setMessage("Created by Michael Barakat, 2022");
        do prompt.printMessage();
        return;
    }

    // method playAgain
        // prompts the player and asks if they would like to play again
    method void playAgain(){
        var PromptData startGame;
        
        do resetGame();

        let startGame = promptPlayerStart("Would you like to play again? (y/n)", 89, 78, 6);

        if(startGame.getKeyCode() = 78){
            do endGame();
        }
        return;
    }

    // method isRoyalCard
        // arg1: Card to check
        // checks if the card is royal (jack, queen or king)
    method Boolean isRoyalCard(Card card){
        var CardValue cardValObj;
        var String cardName;

        let cardValObj = card.getCardValueObj();
        let cardName = card.getName();

        if(cardName = cardValObj.getJack()){
            return true;
        }
        if(cardName = cardValObj.getQueen()){
            return true;
        }
        if(cardName = cardValObj.getKing()){
            return true;
        }

        return false;
    }

    // method isAce 
        // arg1: Card
        // checks if the arg card is an ace
    method Boolean isAce(Card card){
        var CardValue cardValObj;
        let cardValObj = card.getCardValueObj();

        if(card.getName() = cardValObj.getAce()){
            return true;
        }

        return false;
    }

    // method isBlackJack
        // checks for black jack
        // prints celebratory message if the player has hit a black jack
    method Boolean isBlackJack(Array hand){
        if( (isAce(hand[0]) & isRoyalCard(hand[1])) | (isAce(hand[1]) & isRoyalCard(hand[0])) ){
            do prompt.shiftOffset(11, -2);
            do prompt.setMessage("Black Jack! You win.");
            do prompt.printMessage();
            do prompt.shiftOffset(-11, 2);
            let gameActive = 0;

            return true;
        }
        return false;
    }

    // method dealerDealsTheirHand
        // dealer animations
    method void dealerDealsTheirHand(int dealerCount){
        do dealCard(dealerCards, 3 + dealerCount);
        do score.setDealer(dealerCards);
        do score.print();
        do printHand(dealerCards, 10, 5);
        do Sys.wait(2000);
        return;
    }

    // method gameLoop
        // game loop sets the timing and sequence of the game
    method void gameLoop(){
        var int gameCount;
        var int dealerCount;

        do dealFirstHand();

        while(gameActive = 1){
            // printCards
            do printHand(playerCards, 200, 5);
            do printHand(dealerCards, 10, 5);

            //  print score
            do score.setPlayer(playerCards);
            do score.setDealer(dealerCards);
            do score.print();

            // if over 21 player bust
            if(score.getPlayerScore() > 21){
                do prompt.shiftOffset(10,-2);
                do prompt.setMessage("Busted. You have lost.");
                do prompt.printMessage();
                do prompt.shiftOffset(-10,2);
                let gameActive = 0;
                let hitPlayer = false;

                do Sys.wait(2000);

                return;
            }

            // prompt player: would you like another card?
            if((hitPlayer = true) & (score.getPlayerScore() < 21)){
                let hitPlayer = promptPlayerForAnotherCard();
            }
            else {
                // turn the loop off if player is done drawing cards
                let gameActive = 0;

                if(score.getPlayerScore() = 21){
                    // if black jack player always wins
                    if(isBlackJack(playerCards) = true){
                        let gameActive = 0;
                        do Sys.wait(2000);
                        return;
                    }

                    do prompt.shiftOffset(12, 0);
                    do prompt.setMessage("21, Good job.");
                    do prompt.printMessage();
                    do prompt.shiftOffset(-12, 0);
                    do Sys.wait(2000);
                }

                // dealer draws cards if their score is under 18
                while((score.getDealerScore() < 18) | ( (score.getPlayerScore() = 21) & (score.getDealerScore() < 22) ) ){
                    do prompt.shiftOffset(12, 0);
                    do prompt.setMessage("Dealer draws...");
                    do prompt.printMessage();
                    do dealerDealsTheirHand(dealerCount);
                    do prompt.shiftOffset(-12, 0);
                    let dealerCount = dealerCount + 1;
                }

                if(score.getDealerScore() > 21){
                    do prompt.shiftOffset(10,-2);
                    do prompt.setMessage("Dealer busts! You win!");
                    do prompt.printMessage();
                    do prompt.shiftOffset(-10,2);
                    let gameActive = 0;

                    do Sys.wait(2000);
                    return;
                } 
                if((score.getPlayerScore() > score.getDealerScore()) & ~(score.getPlayerScore() > 21)){
                    do prompt.shiftOffset(16, -2);
                    do prompt.setMessage("You win.");
                    do prompt.printMessage();
                    do prompt.shiftOffset(-16, -0);
                    let gameActive = 0;

                    do Sys.wait(4000);
                    return;
                }

                if(score.getPlayerScore() = score.getDealerScore()){
                    do prompt.shiftOffset(12, -2);
                    do prompt.setMessage("It's a tie.");
                    do prompt.printMessage();
                    do prompt.shiftOffset(-12, 2);
                    let gameActive = 0;

                    do Sys.wait(2000);
                    return;
                }
                else {
                    do prompt.shiftOffset(12, -2);
                    do prompt.setMessage("The Dealer wins.");
                    do prompt.printMessage();
                    do prompt.shiftOffset(-12, 2);
                    let gameActive = 0;

                    do Sys.wait(2000);
                    return;
                }
            }
        }
        return;
    }
}