/** Runs the black jack game

- Deck class - creates the cards
- Deck class - shuffles the deck
- BlackJack class prompts for player to start the game
- Dealer class - deals cards
- Score class - keeps score for player and dealer
- when a player goes over 21 they lose the hand
- when a player loses the game prompts the player if they want to play again.
- the dealer stands when their score is 17 or higher

class BlackJack
    field gameActive: boolean // 0 or 1
    field winner: "player" | "dealer"
    field deck: Deck
    field turn: "player" = 0 | "dealer" = 1 

    field playerCards: Array<Card>
    field dealerCards: Array<Card>
    field playerScore: int
    field dealerScore: int

    field promptString: String
    field prompt: Prompt

    method gameLoop: void
        * show title screen
        * start game - set gameActive to true
        * while gameActive:
            * dealer deals cards. first dealer card remains hidden
            * calculate score
            * prompt player: would you like another card?
            * calculate score
            * if black jack player wins
            * if over 21 player bust
            * if player stays dealer flips hidden card
            * deals card while < 17
    
    method promptPlayerTitle: void
    method promptPlayerStart: void
    method loadDeck: void
    method deal: void
    method promptPlayerForAnotherCard: void
    method drawCard: void
    method checkForWinners: void
    method dealerPlay: void
    method revealCard: void
    method promptPlayerWinner: void
    method promptPlayerLoser: void

*/

class BlackJack {
    field Prompt prompt;
    field String promptString;
    field int gameActive;
    field Deck deck;
    field Score score;

    field Array playerCards;
    field Array dealerCards;

    field int randomizer;

    constructor BlackJack new() {
        let prompt = Prompt.new();
        let gameActive = 0;
        let playerCards = Array.new(9);
        let dealerCards = Array.new(9);

        return this;
    }

    method void start(){
        do promptPlayerStart("Welcome to Black Jack. Press any key to start.");
        return;
    }

    method void promptPlayerStart(String message) {
        var PromptData userInput;

        do prompt.setMessage(message);

        let userInput = prompt.promptUser();
        let randomizer = userInput.getElapsedTime();

        if (~(userInput.getKeyCode() = 0)) {
            let gameActive = 1;
            do Sys.wait(250);
            do gameLoop();
        }

        return;
    }

    method int promptPlayerForAnotherCard() {
        var PromptData userInput;
        var int userInputKeyCode;
        let userInputKeyCode = 0;

        do prompt.setMessage("Would you like to draw another card? (press y for yes. press n for no.)");
        let userInput = prompt.promptUser();
        let userInputKeyCode = userInput.getKeyCode();

        do Output.printInt(userInputKeyCode);
        if (userInputKeyCode = 78){
            let gameActive = 0;
            do prompt.eraseLine();
            return 0;
        }

        if (userInputKeyCode = 89){
            do Sys.wait(250);
            do dealCard(playerCards, userInput.getElapsedTime());

            return 1;
        }

        return 0;
    }

    method void loadDeck(){
        let deck = Deck.new();
        return;
    }

    method void dealCard(Array dest, int randomizer){
        var Card cardFromDeck;
        var int i;

        let cardFromDeck = deck.getRandomCard(randomizer);
        let i = 0;

        while(~(dest[i] = null)){
            let i = i + 1;
        }

        let dest[i] = cardFromDeck;
        return;
    }

    method void printHand(Array cards, int positionY) { 
        var Card card;
        var int i;
        let i = 0;

        while(~(cards[i] = null)) {
            let card = cards[i];
            do card.setLocationY(positionY);
            do card.setLocationX((i * 4) + 6);
            do card.render();
            let i = i + 1;
        }

        return;
    }

    method void gameLoop(){
        var int gameCount;
        var int dealerCount;
        var int hitPlayer;
        // create deck and load deck
        do loadDeck();

        // create score
        let score = Score.new(0,0);
        // first deal cards to player
        do dealCard(playerCards, randomizer);
        do dealCard(playerCards, randomizer + 3);
        let hitPlayer = 0;

        while(gameActive = 1){
            // printCards
            do printHand(playerCards, 200);

            //  print score
            do score.setPlayer(playerCards);
            do score.print();

            // prompt player: would you like another card?
            if(hitPlayer = 1){
                let hitPlayer = promptPlayerForAnotherCard();
            }
            else {
            // if no dealer draws cards
                do prompt.eraseLine();
            //     let dealerCount = 0;
            //     while(score.getDealerScore() < 18){
            //         do dealCard(dealerCards, 3 + dealerCount);
            //         do score.setDealer(dealerCards);
            //         do printHand(dealerCards, 80);

            //         do score.print();
            //         let dealerCount = dealerCount + 1;
            //     }

            //     if(score.getDealerScore() > 21){
            //         do prompt.setMessage("Dealer busts! You win!");
            //         do prompt.printMessage();
            //     }

                let gameActive = 0;
            }

            // // calculate winners
            if(score.getPlayerScore() = 21 & gameActive = 1){
                do prompt.setMessage("You have won the game.");
                do prompt.printMessage();
                let gameActive = 0;
            }
            if(score.getPlayerScore() > 21){
                do prompt.setMessage("You have lost.");
                do prompt.printMessage();
                let gameActive = 0;
            }
        }

        do promptPlayerStart("Would you like to play again? (y/n)");

            // if black jack player wins
            // if over 21 player bust
            // if player stays dealer flips hidden card
            // deals card while < 17
            // let gameActive = 0;

        return;
    }
}