/** 
class Prompt
Prompts the play with a message and asks for input 

field keyPressed: Char - sets a value to which key has been pressed
field offsetX: int - sets offset for text print max value of 23
field offsetY: int - sets offset for text print max value of 64
static message: String - message to print on screen

setMessage(string newMessage) - setter for message
eraseLine() - erases the line according to the offset value 
promptUser() - prints the message to screen
*/

class Prompt {
    field Char keyCode;
    field int offsetX;
    field int offsetY;
    field String message;
    field PromptData promptData;
    field int promptWidth;

    constructor Prompt new(){
        let message = "empty message";
        let offsetY = 6;
        let offsetX = 8;
        let keyCode = 0;
        let promptWidth = 48;
        return this;
    }

    method void eraseScreen() {
        var int count;
        var int posY;
        var int loopScreen;
        let loopScreen = 0;
        let posY = 0;
        let count = 0;

        while(loopScreen = 0){
            do Output.moveCursor(posY, count);
            let count = count + 1;

            if(count = 64){
                let posY = posY + 1;
                let count = 0;
            }
            if(posY = 23){
                let loopScreen = 1;
            }
        }

        do Output.moveCursor(offsetY, offsetX);

        return;
    }

    method void eraseLine() {
        var int lineCount;
        var int tempOffsetY;
        var int tempOffsetX;
        let tempOffsetX = 0;
        let tempOffsetY = offsetY;
        let lineCount = 0;

        // loopScreen max of 3 lines
        while (lineCount < 3){
            do Output.moveCursor(tempOffsetY, tempOffsetX);
            let tempOffsetX = tempOffsetX + 1;

            if(tempOffsetX = 64){
                let tempOffsetX = 0;
                let tempOffsetY = tempOffsetY + 1;
                let lineCount = lineCount + 1;
            }
        }
        do Output.moveCursor(offsetY, offsetX);

        return;
    }

    method void setMessage(String newMessage){
        do eraseLine();
        let message = newMessage;
        return;
    }

    method void setOffset(int offsetX, int offsetY){
        let offsetX = offsetX;
        let offsetY = offsetY;
        return;
    }

    method void printMessage(){
        do Output.printString(message);
        return;
    }

    method PromptData promptUser(){
        var Boolean hasKeyBeenPressed;
        var int timeElapsed;
        var Array parsedMessage;
        var int messageLineCount;

        let hasKeyBeenPressed = false;
        let timeElapsed = 0;
        
        let keyCode = 0;
        
        do Output.moveCursor(offsetY, offsetX);
        do Output.printString(message);

        while(hasKeyBeenPressed = false){
            let keyCode = Keyboard.keyPressed();
            let timeElapsed = timeElapsed + 1;
            if(timeElapsed > 52){
                let timeElapsed = 0;
            }
            if(~(keyCode = 0)){
                let hasKeyBeenPressed = true;
            }
        }

        let promptData = PromptData.new(timeElapsed, keyCode);
        return promptData;
    }
    
    method void dispose() {
       do promptData.dispose();
       do Memory.deAlloc(this);
       return;
    }
}