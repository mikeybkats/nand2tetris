// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 0000 0000 0000 0000
    // i xx a cccccc ddd jjj
    // i  x  x  a1 c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    // The first and second d-bits code whether to store the computed value in the A register 
    // and in the D register, respectively. The third d-bit codes
    // whether to store the computed value in M (i.e., in Memory[A]). One, more than one,
    // or none of these bits may be asserted.

    // Decoder()
    // a1 ––> Mux16
    // d1 (store in A reg?)  
    // d2 (store in D reg?)  
    // d3 (store in M reg?)
    // j1 j2 j3 ––> ProgramCounter

    // instSelectOut picks either A or C instruction
    Mux16(a=instruction, b=outMaReg, sel=instruction[15], out=instSelectOut);
    ALU(
        x=dRegOut, // 16 bit input
        y=aRegOrInM, // 16 bit input
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outMaReg, 
        out=outMdReg, 
        zr=zr, // where go? 
        ng=ng // where go?
        );

    Not(in=instruction[15], out=isAInstruction);

    // A register
    Or(a=instruction[5], b=isAInstruction, isARegister)
    Register(in=instSelectOut, load=isARegister, out=aRegOut1, out=addressM, out=aRegOut3);

    // D register
    And(a=instruction[4], b=isAInstruction, out=isDRegister);
    Register(in=outMdReg, load=isDRegister, out=dRegOut);
    
    // M or A register?
    And(a=instruction[3], b=isAInstruction, out=isMDest);
    Mux16(a=aRegOut1, b=inM, sel=isMDest, out=aRegOrInM);
    Or(a=instruction[3], b=instruction[3], out=writeM);
    
    PC(in=aRegOut3, load=, inc=true, reset=reset, out=pc);
}