// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int ram;
    static int freelist;
    static int blockSize;
    static int nextBlock;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        
        // init free list:
        // // length is size of heap - 14355
        // // next is null since there is no next node to start with
        // node[0] = block size
        // node[1] = next array
        // node[2] = data

        let blockSize = 0;
        let nextBlock = 1;
        let freelist = 0; // start of heap is 2048
        let freelist[blockSize] = 14354;

        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    function int firstFit(int size){
        var int node;

        let node = freelist;

        if(node[blockSize] > size){
            return node;
        } 
        else {
            while(~(node[nextBlock] = null)){
                if(node[blockSize] > size){
                    return node;
                }
                let node = node[nextBlock];
            }
        }

        return 0;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int newBlock;
        var int availableBlock;

        let availableBlock = Memory.firstFit(size);

        if(~(availableBlock)){
            // attempt to defragment space
            return "memory failure";
        }
        else {
            // remove required size from node length
            let availableBlock[blockSize] = availableBlock[blockSize] - size;

            // create the new node and add 
            // newBlock location points to the end of the availableBlock length
            // let newBlock = availableBlock[blockSize];
            let newBlock = 0;
            let newBlock[blockSize] = size;

            let availableBlock[nextBlock] = newBlock;
        }

        return availableBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int freelistSize;
        let freelistSize = freelist[blockSize];
        let freelist[blockSize] = freelist[blockSize] + o[blockSize];
        let freelist[freelistSize] = o;

        return;
    }    
}
