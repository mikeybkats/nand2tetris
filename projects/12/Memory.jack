// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int startOfBlock;
        var int endOfBlock;
        var int location;

        let location = 2048;
        while(location < 16384){
            // if the ram does not = 0 continue to search
            if(~(ram[location = 0])){
                let location = location + 1;
            }
            else {
                // if a 0 is found count how large it spans
                let startOfBlock = location;
                let endOfBlock = location;

                while(endOfBlock - startOfBlock = size){
                    if (ram[endOfBlock] = 0){
                        let endOfBlock = endOfBlock + 1;
                    }
                    // the block is too short
                    if((ram[endOfBlock] = 1) & (endOfBlock - startOfBlock < size)){
                        let startOfBlock = endOfBlock + 1;
                        let endOfBlock = endOfBlock + 1;
                    }
                }

            }

        }
        return startOfBlock;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }    
}
