// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.

 */

/** Initializes the library.
// twoToThe[0] = 1;
// twoToThe[1] = 2; 
// twoToThe[2] = 4; x
// twoToThe[3] = 8; 
// twoToThe[4] = 16; x
// twoToThe[5] = 32; x
// twoToThe[6] = 64; x
// twoToThe[7] = 128; x
// twoToThe[8] = 256; x
// twoToThe[9] = 512;
// twoToThe[10] = 1024;
// twoToThe[11] = 2048;
// twoToThe[12] = 4096;
// twoToThe[13] = 8192;
// twoToThe[14] = 16384;
// twoToThe[15] = -32768;
    */

class Math {
    static Array twoToThe;

    function void init() {
        var int i;
        var int double;

        let twoToThe = Array.new(16);

        let i = 0;
        let double = 1;

        while(i < 16){
            let twoToThe[i] = double;

            // do Output.printInt(twoToThe[i]);
            // do Output.println();

            let double = double + double;
            let i = i + 1;

        }
        let twoToThe[15] = -32767;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return (~x) + 1;
        }
        return x;
    }

    function int bit(int x, int j){
        return ~((x & twoToThe[j]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.

     multiply(x, y):
        sum = 0
        shiftedX = x
        for i = 0... #ofBits - 1 do:
            if((i'th bit of y) == 1):
                sum = sum + shiftedX         
            shiftedX = shiftedX + shiftedX

        return sum
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;
        var int bitOfY;
        var int length;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        if((x < 0) | (y < 0)){
            let length = 16;
        } 
        else {
            let length = 15;
        }

        while(i < length) {
            let bitOfY = Math.bit(y, i);

            if ( bitOfY = -1 ) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     divide(x,y):
        if y > x return 0
      
        q = divide(x,2*y)

        if(x-2 * q * y)  < y
            return 2 * q
        else
            return 2 * q + 1
     */
    function int divide(int x, int y) {
        var int q;
        var int xyLess;

        if(x < 0){
            let xyLess = 1;
            let x = Math.abs(x);
        }
        if(y < 0){
            let xyLess = 1;
            let y = Math.abs(y);
        }

        if(y > x){
            return 0;
        }

        let q = Math.divide(x, 2 * y);

        if(((x - (2 * q * y)) < y)){
            if(xyLess = 1){
                return 2 * q * -1;
            }
            return 2 * q;
        }
        else {
            if(xyLess = 1){
                return ~((2 * q));
            }
            return (2 * q) + 1;
        }
    }

    function int power(int x, int power){
        var int sum;

        let sum = x;

        while(power > 1){
            let sum = Math.multiply(sum, x);
            let power = power - 1;
        }

        return sum;
    }

    /** Returns the integer part of the square root of x. 
        sqrt(x):
            y = 0

            for j = (n/2) - 1 until 0 do:
                if (y+2 to the j)squared <= x:
                    y = y + 2 to the j
            
            return y
    */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int jSquared;

        let y = 0;

        // j = bit length / 2 - 1
        let j = 7;

        while(~(j = 0)){
            let jSquared = Math.power(y + 2, j);
            if(Math.power(jSquared, 2) < (x +1)){
                let y = Math.power(y + 2, j);
            }
            let j = j - 1;
        }
        
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }
}
