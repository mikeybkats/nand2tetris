// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int double;

        let twoToThe = Array.new(16);
        let i = 0;
        let double = 1;

        // twoToThe[0] = 1;
        // twoToThe[1] = 2; 
        // twoToThe[2] = 4; x
        // twoToThe[3] = 8; 
        // twoToThe[4] = 16; x
        // twoToThe[5] = 32; x
        // twoToThe[6] = 64; x
        // twoToThe[7] = 128; x
        // twoToThe[8] = 256; x
        // twoToThe[9] = 512;
        // twoToThe[10] = 1024;
        // twoToThe[11] = 2048;
        // twoToThe[12] = 4096;
        // twoToThe[13] = 8192;
        // twoToThe[14] = 16384;
        // twoToThe[15] = -32768;

        while(i < 15){
            let twoToThe[i] = double;
            let double = double + double;
            let i = i + 1;
        }
        let twoToThe[15] = -32767;


        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return 0;
    }

    /** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
    function boolean bit(int x, int j) {
        // j'th location of holds the value 2 to the power of j.
        var int i;
        var int sumOf;
        var array trueBits;
        var int nextSumOf;
        var boolean polarity;

        let trueBits = Array.new(16);
        let sumOf = 0;

        if (x < 0){
            let i = 15;
            let polarity = false;

            // initialize true bits
            while (i > 0){
                let trueBits[i] = 1;
                let i = i - 1;
            }

            let i = 15;

        } else {
            let i = 14;
            let polarity = true;
        }



        while(i > 0){
            if ((twoToThe[i] > x) & (twoToThe[i-1] < x)){
                let i = i - 1;
                let sumOf = twoToThe[i];
                let trueBits[i] = polarity;

                while((i > 0 ) | (i = 0)){
                    let nextSumOf = sumOf + twoToThe[i - 1];
                    // can you add the next number w/o going over x?
                    if((nextSumOf < x) | (nextSumOf = x)){
                        // okay, add the next number to the total
                        let sumOf = nextSumOf;
                        let trueBits[i - 1] = polarity;
                    } 
                    let i = i - 1;
                }
            } else {
                let i = i - 1;
            }
        }

        let i = 0;
        while(i < 16){
            do Output.printInt(i);
            do Output.printString(" /// ");
            do Output.printInt(twoToThe[i]);
            do Output.printString(" /// ");
            do Output.printInt(trueBits[i]);
            do Output.println();
            let i = i + 1;
        }

            do Output.println();
        do Output.printInt(trueBits[3]);
            do Output.println();

            do Output.println();
        do Output.printInt(~(x & twoToThe[3] = 0));
            do Output.println();
        do Output.printInt(~(x & twoToThe[4] = 0));

        return trueBits[j];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while(i < 16) {
            if (y[i] = 1){
             let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX * 2;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        return 0;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return 0;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return 0;
    }
}
