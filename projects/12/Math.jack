// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int double;

        let twoToThe = Array.new(16);
        let i = 0;
        let double = 1;

        // twoToThe[0] = 1;
        // twoToThe[1] = 2;
        // twoToThe[2] = 4;
        // twoToThe[3] = 8;
        // twoToThe[4] = 16;
        // twoToThe[5] = 32;
        // twoToThe[6] = 64;
        // twoToThe[7] = 128;
        // twoToThe[8] = 256;
        // twoToThe[9] = 512;
        // twoToThe[10] = 1024;
        // twoToThe[11] = 2048;
        // twoToThe[12] = 4096;
        // twoToThe[13] = 8192;
        // twoToThe[14] = 16384;
        // twoToThe[15] = -32768;

        while(i < 15){
            let twoToThe[i] = double;
            let double = double + double;
            let i = i + 1;
        }
        let twoToThe[15] = -32767;


        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return 0;
    }

    /** Returns true if the j-th bit of the integer x is 1 and false otherwise. */
    function boolean bit(int x, int j) {
        // j'th location of holds the value 2 to the power of j.
        var int i;
        var int ii;
        var int sumOf;
        var array trueBits;

        let trueBits = Array.new(16);
        let i = 0;
        let sumOf = 0;


        while(i < 15){
            if ((twoToThe[i] > x) & (twoToThe[i-1] < x)){
                let ii = i - 1;
                let sumOf = twoToThe[ii];

                while((ii > 0 ) | (ii = 0)){

                    if((sumOf + twoToThe[ii - 1]) > x){
                        let trueBits[ii] = false;
                    } else {
                        let sumOf = sumOf + twoToThe[ii - 1];

                        do Output.printInt(sumOf);
                        do Output.println();
                        let trueBits[ii] = true;
                    }
                    let ii = ii - 1;
                }
            }
            let i = i + 1;
            let trueBits[i] = false;
        }

        return trueBits[j];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while(i < 16) {
            if (y[i] = 1){
             let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX * 2;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        return 0;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return 0;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return 0;
    }
}
