// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static Array word;
    static int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = maxLength;

        if(maxLength = 0){
            let maxLength = 1;
        }
        
        let word = Array.new(maxLength);

        let length = 0;

        return this;
    }   

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        do word.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        var int count;
        var int n;

        let count = 0;
        let n = 0;
        while(n < maxLength){
            if(word[n]){
                let count = count + 1;
            }
            let n = n + 1;
        }

        let length = count;

        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return word[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let word[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        // do Output.printInt(length);
        let word[length] = c;
        let length = length + 1;

        return word;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let word[length] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int total;
        var int count;
        var int isNegative;

        let count = 0;
        if(word[0] = 45){
            let isNegative = 1;
            let count = 1;
        }

        while(count < length){
            let total = total * 10 + (word[count] - 48);
            let count = count + 1;
        }

        if(isNegative){
            let total = -total;
        }

        return total;
    }

    function int int2String(int val){
        var int lastDigit;
        var int c; // character representing last digit

        let lastDigit = val - ((val / 10) * 10);
        let c = lastDigit + 48;

        if(val < 10){
            return c;
        }
        else {
            do String.int2String(val / 10);
            // do String.appendChar(c);
            let length = length + 1;
            let word[length] = c;
            return word;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let word = String.int2String(val);
         
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
