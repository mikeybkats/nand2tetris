// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static int color;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int double;

        let twoToThe = Array.new(16);

        let i = 0;
        let double = 1;

        while(i < 16){
            let twoToThe[i] = double;

            let double = double + double;
            let i = i + 1;

        }
        // let twoToThe[15] = -32767;

        let color = 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b){
            let color = 1;
        } 
        else {
            let color = -1;
        }

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int segment;
        var int address;
        var int value;
        var int mod;
        var int bit;

        // 32 ram segments per line
        // linestart = linestart + 32 * segment
        let segment = (32 * y) + (x / 16);
        let address = 16384;
        let address = address + (segment);

        let value = Memory.peek(address);

        let mod = x - ((x / 16) * 16);
        // 287 - (287/16 * 16) 
        
        let bit = twoToThe[mod];

        // value  0001 0001 0000 0011
        // x % 16 1000 0000 1000 0000 
        let value = (value | bit) * color;

        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    /** 
    function void drawLine(int x1, int y1, int x2, int y2) {
        dx = x2 - x1
        dy = y2 - y1
        a = 0
        b = 0

        while((a <= dx) && (b <= dy)){
            drawPixel(x + a, y + b)

            if (diff < 0){
                a++
                diff += dy
            } else {
                b++ 
                diff -= dx
            }
        }
    }
    */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int dy;
        var int dx;
        var int diff;

        let a = 0;
        let b = 0;
        let dy =  Math.abs(y2 - y1);
        let dx = Math.abs(x2 - x1);
        let diff = 0;

        if(dy=0){
            // write the horizontal line
            while(diff < dx){
                if(x1 < x2){
                    do Screen.drawPixel(x1 + diff, y1);
                }
                if(x2 < x1){
                    do Screen.drawPixel(x2 + diff, y1);
                }
                let diff = diff + 1;
            }
            return;
        }
        if(dx = 0){
            // write the vertical line
            while(diff < dy){
                if(y1 < y2){
                    do Screen.drawPixel(x1, y1 + diff);
                }
                if(y2 < y1){
                    do Screen.drawPixel(x1, y2 + diff);
                }
                let diff = diff + 1;
            }
            return;
        }

        while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))){
            if((x1 > x2) & (y1 > y2)){
                do Screen.drawPixel(x1 - a, y1 - b);
            }
            if((x1 > x2) & (y1 < y2)){
                do Screen.drawPixel(x1 - a, y1 + b);
            }
            if((x1 < x2) & (y1 > y2)){
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            if((x1 < x2) & (y1 < y2)){
                do Screen.drawPixel(x1 + a, y1 + b);
            }

            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int height;
        var int i;

        let height = y2 - y1;
        let i = 0;

        while(i < height){
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);

            // while x1 % 32 != 0
            // drawPixel 
            // x1 = x1 + 1;
                // if x1 % 32 == 0
                    // while x1 % 32 == 0
                        // screenLocation = -32767
                        // x1 = x1 + 15

            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    // drawCircle(x, y, r):
    //     for each dy = -r do:
    //         triangleBase = SquareRoot(r squared - dy squared) 
    //         yCoord = y + dy
    //         drawLine(x - triangleBase, yCoord, x + triangleBase, yCoord)
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int triangleBase;
        var int yCoord;

        let dy = r * -1;

        while(~(dy = r)){
            let triangleBase = Math.sqrt(((r * r) - (dy * dy)));
            let yCoord = y + dy;
            do Screen.drawLine(x - triangleBase, yCoord, x + triangleBase, yCoord);
            let dy = dy + 1;
        }
        return;
    }
}
