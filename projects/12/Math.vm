function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 15
push static 0
add
push constant 32767
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push constant 0
return
function Math.bit 5
push constant 16
call Array.new 1
pop local 2
push constant 0
pop local 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 15
pop local 0
push constant 0
pop local 4
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 15
pop local 0
goto IF_END0
label IF_FALSE0
push constant 14
pop local 0
push constant 0
not
pop local 4
label IF_END0
label WHILE_EXP1
push local 0
push constant 0
gt
not
if-goto WHILE_END1
push local 0
push static 0
add
pop pointer 1
push that 0
push argument 0
gt
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
push argument 0
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
sub
pop local 0
push local 0
push static 0
add
pop pointer 1
push that 0
pop local 1
push local 0
push local 2
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP2
push local 0
push constant 0
gt
push local 0
push constant 0
eq
or
not
if-goto WHILE_END2
push local 1
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
add
pop local 3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
pop local 1
push local 0
push constant 1
sub
push local 2
add
push local 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP2
label WHILE_END2
goto IF_END1
label IF_FALSE1
push local 0
push constant 1
sub
pop local 0
label IF_END1
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 0
label WHILE_EXP3
push local 0
push constant 16
lt
not
if-goto WHILE_END3
push local 0
call Output.printInt 1
pop temp 0
push constant 5
call String.new 1
push constant 32
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
push static 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 5
call String.new 1
push constant 32
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 47
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
push local 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP3
label WHILE_END3
call Output.println 0
pop temp 0
push constant 3
push local 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
call Output.println 0
pop temp 0
push argument 0
push constant 3
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
push argument 0
push constant 4
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
not
call Output.printInt 1
pop temp 0
push argument 1
push local 2
add
pop pointer 1
push that 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push constant 16
lt
not
if-goto WHILE_END0
push local 2
push argument 1
add
pop pointer 1
push that 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push constant 2
call Math.multiply 2
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.divide 0
push constant 0
return
function Math.sqrt 0
push constant 0
return
function Math.max 0
push constant 0
return
function Math.min 0
push constant 0
return
